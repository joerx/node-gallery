var fs = require('fs'),
    album = require('./album.js'),
    util = require('./util.js');

var Albums = function(root) {
  this.findAll = function(options, callback) {
    listAlbums(root, options, callback);
  };

  this.album = function(albumName) {
    return album.create(root + '/' + albumName);
  };
}

exports.version = '1.0.0';
exports.create = function(root) {
  return new Albums(root);
};

function listAlbums(root, options, callback) {

  try {
    options = util.validatePager(options);
  } catch (err) {
    return callback(err);
  }

  fs.readdir(root, function(err, files) {
    if (err) {
      callback(err);
    } else {
      albums = [];
      (function iterator(idx) {
        if (idx >= files.length || albums.length >= options.pageSize) {
          // Termination condition, only on last iteration callback is invoked.
          // Terminate if no more files are available or if we found enough 
          // files to return the current page, whatever happens first.
          return callback(null, albums);
        } else {
          var path = root + '/' + files[idx];
          fs.stat(path,
          function (err, stats) {
            if (err) {
              callback(err);
            } else {
              if (stats.isDirectory()) {
                albums.push(album.create(path));
              }
              // iterator function is called recursively inside fs.stat-callback
              iterator(idx + 1);
            }
          });
        }
      })(options.page * options.pageSize);
    }
  });
}