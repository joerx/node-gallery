(function(exports){

  var http = require('http'),
    fs = require('fs'),
    url = require('url');

  function AlbumHandler(albumMgr) {
    console.log(albumMgr);
    this.albums = albumMgr;
  }

  AlbumHandler.prototype.albums = null;

  AlbumHandler.prototype.handle = function(req, res) {
    console.log("Incoming request: " + req.method + " " + req.url);

    req.parsedUrl = url.parse(req.url, true);
    var baseUrl = req.parsedUrl.pathname;
    var query = req.parsedUrl.query || {};

    var matches = null;

    // GET/POST /album/$albumName
    if (matches = baseUrl.match(/^\/albums\/([\%a-zA-Z0-9_-]+)/)) {
      // We need to decode after matching, since regexp does not support unicode
      // out of the box (and we're to lazy to install an extension now...)
      var albumName = decodeURI(matches[1]);
      if (req.method == 'GET') {
        return this.getAlbumContents(albumName, req, res, query);
      } else if (req.method == 'POST') {
        return this.renameAlbum(albumName, req, res);
      }
    // GET /albums
    } else if (matches = baseUrl.match(/^\/albums\/?/)) {
      return this.listAlbums(req, res, query);
    }
      
    respondNotFound(res, noHandler(req));
  };


  // Send a response containing the list of albums
  AlbumHandler.prototype.listAlbums = function (req, res, options) {
    console.log('List albums');
    this.albums.findAll(options, function(err, albums){
      if (err) {
        if (err.code == 'EINVALIDARG') {
          respondError(res, 400, err);
        } else {
          respondError(res, 503, err);
        }
      } else {
        respondSuccess(res, 200, {collection: albums});
      }
    });
  }


  // Send a response containing the contents of a single album
  AlbumHandler.prototype.getAlbumContents = function(albumName, req, res, options) {
    console.log('List contents of album: ' + albumName);
    this.albums.album(albumName).photos(options, function(err, photos) {
      if (err) {
        console.log(err);
        if (err.code == 'ENOSUCHALBUM') {
          respondNotFound(res, err);
        } else if (err.code == 'EINVALIDARG') {
          respondError(res, 400, err);
        } else {
          respondError(res, 503, err);
        }
      } else {
        respondSuccess(res, 200, {collection: photos});
      }
    });
  }


  // Rename an existing album
  AlbumHandler.prototype.renameAlbum = function(albumName, req, res) {
    console.log('Rename album');

    var self = this;

    bodyAsJson(req, function(err, albumData) {
      if (err) {
        respondError(res, 400, err);
      } else {
        if (!albumData.albumName) {
          respondError(res, 400, invalidArgument('Album name is missing'));
          return;
        }
        self.albums.album(albumName).rename(albumData.albumName, 
          function(err, result) {
            if (err) {
              respondError(res, 500, err);
            } else {
              var location = mkUrl(req, '/albums/' + albumData.albumName);
              var headers = {'Location': location};
              var data = {'url': location};
              respondSuccess(res, 200, data, headers);
            }
          }
        );
      }
    });
  }

  function bodyAsJson(req, callback) {
    var reqBody = '';
    
    req.on('readable', function() {
      var part = req.read();
      if (part) {
        if (typeof part == 'string') {
          reqBody += part;
        } else if (typeof part == 'object' && part instanceof Buffer) {
          reqBody += part.toString('utf8');
        }
      }
    }); 

    req.on('end', function() {
      try {
        var jsonObj = JSON.parse(reqBody);
      } catch (err) {
        return callback(err);
      }
      callback(null, jsonObj);
    })    
  }

  // Send a 404 response to the client
  function respondNotFound(res, error) {
    respondError(res, 404, error);
  }

  // Send an error response with the error object wrapped properly
  function respondError(res, status, error) {
    respond(res, status, {error: {
      message: error.toString(),
      code: error.code
    }});
  }

  // Just an alias for 'respond', for symmetry
  function respondSuccess(res, status, data, additionalHeaders) {
    respond(res, status, data, additionalHeaders);
  }

  // Check and assign server config to an instance
  // function chkConfig(cfg) {
  //   var config = {};
  //   if (!cfg.albumsDir) {
  //     throw new Error('Invalid config, missing albums dir');
  //   } else {
  //     config.albumsDir = cfg.albumsDir;
  //   }

  //   return config;
  // }

  // Content type will be set to 'application/json'
  function respond(res, status, data, additionalHeaders) {
    var headers = additionalHeaders || {};
    data = data || {};

    // For now, we force content type
    headers['Content-Type'] = 'application/json';

    res.writeHead(status, headers);
    res.end(JSON.stringify(data) + "\n");
  }

  function mkError(errCode, msg) {
    var e = new Error(msg);
    e.code = errCode;
    return e;
  }

  function noHandler(req) {
    var msg = 'No handler for ' + req.method + ' ' + req.url;
    return mkError('ENOHANDLER', msg);
  } 

  function mkUrl(req, path) {
    return 'http://' + req.headers.host + path; 
  }

  exports.create = function(albumMgr) {
    var ahandler = new AlbumHandler(albumMgr);
    var server = http.createServer(ahandler.handle.bind(ahandler));
    return server;
  }


})(exports);